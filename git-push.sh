#!/bin/bash

# Script para automatizar git push
# Uso: ./git-push.sh [branch]

echo "=== GIT PUSH AUTOM√ÅTICO ==="

# Verifica se est√° em um reposit√≥rio Git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Erro: N√£o est√° em um reposit√≥rio Git!"
    exit 1
fi

# Define o branch (padr√£o: branch atual)
if [ -z "$1" ]; then
    branch=$(git branch --show-current)
else
    branch="$1"
fi

echo "üåø Branch: $branch"

# Verifica se h√° commits para enviar
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u} 2>/dev/null)

if [ -z "$REMOTE" ]; then
    echo ""
    echo "‚ö†Ô∏è  Branch '$branch' n√£o tem upstream configurado!"
    echo ""
    read -p "Deseja criar o branch no reposit√≥rio remoto? (s/n): " create_remote
    
    if [ "$create_remote" = "s" ] || [ "$create_remote" = "S" ]; then
        echo "üì§ Criando branch no remoto e fazendo push..."
        git push -u origin $branch
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Branch criado e push realizado com sucesso!"
        else
            echo "‚ùå Erro ao fazer push!"
            exit 1
        fi
        exit 0
    else
        echo "‚ùå Opera√ß√£o cancelada!"
        exit 0
    fi
fi

# Verifica se h√° mudan√ßas n√£o commitadas
if ! git diff-index --quiet HEAD --; then
    echo ""
    echo "‚ö†Ô∏è  Existem mudan√ßas n√£o commitadas!"
    echo ""
    git status -s
    echo ""
    echo "Op√ß√µes:"
    echo "1) Fazer commit e continuar"
    echo "2) Ignorar mudan√ßas e fazer push apenas dos commits existentes"
    echo "3) Cancelar opera√ß√£o"
    echo ""
    read -p "Escolha uma op√ß√£o (1/2/3): " choice
    
    case $choice in
        1)
            echo ""
            read -p "Digite a mensagem do commit: " commit_msg
            if [ -z "$commit_msg" ]; then
                commit_msg="Commit autom√°tico antes do push - $(date '+%d/%m/%Y %H:%M:%S')"
            fi
            git add -A
            git commit -m "$commit_msg"
            ;;
        2)
            echo "üì§ Fazendo push apenas dos commits existentes..."
            ;;
        3)
            echo "‚ùå Opera√ß√£o cancelada!"
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            exit 1
            ;;
    esac
fi

# Atualiza informa√ß√µes do remoto
git fetch origin

# Verifica novamente ap√≥s poss√≠vel commit
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})

if [ "$LOCAL" = "$REMOTE" ]; then
    echo "‚úÖ Nada para enviar! Reposit√≥rio j√° est√° sincronizado."
    exit 0
elif [ "$REMOTE" = "$BASE" ]; then
    # Temos commits locais para enviar
    echo ""
    echo "üìä Commits a serem enviados:"
    git log --oneline $REMOTE..$LOCAL
    echo ""
    
    read -p "Confirma o envio? (s/n): " confirm
    if [ "$confirm" = "s" ] || [ "$confirm" = "S" ]; then
        echo ""
        echo "üì§ Enviando commits..."
        git push origin $branch
        
        if [ $? -eq 0 ]; then
            echo ""
            echo "‚úÖ Push realizado com sucesso!"
        else
            echo "‚ùå Erro ao fazer push!"
            exit 1
        fi
    else
        echo "‚ùå Push cancelado!"
        exit 0
    fi
elif [ "$LOCAL" = "$BASE" ]; then
    echo "‚ö†Ô∏è  O branch remoto tem commits que voc√™ n√£o tem localmente!"
    echo "Execute ./git-pull.sh primeiro para atualizar seu reposit√≥rio."
    exit 1
else
    echo "üîÄ Diverg√™ncia detectada!"
    echo ""
    echo "Op√ß√µes:"
    echo "1) Fazer pull e depois push (recomendado)"
    echo "2) For√ßar push (‚ö†Ô∏è  CUIDADO: sobrescreve o remoto)"
    echo "3) Cancelar"
    echo ""
    read -p "Escolha uma op√ß√£o (1/2/3): " choice
    
    case $choice in
        1)
            echo "üì• Fazendo pull primeiro..."
            git pull origin $branch
            
            if [ $? -eq 0 ]; then
                echo "üì§ Agora fazendo push..."
                git push origin $branch
                
                if [ $? -eq 0 ]; then
                    echo "‚úÖ Sincroniza√ß√£o completa!"
                else
                    echo "‚ùå Erro no push ap√≥s pull!"
                    exit 1
                fi
            else
                echo "‚ùå Erro no pull! Resolva os conflitos e tente novamente."
                exit 1
            fi
            ;;
        2)
            echo ""
            echo "‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° prestes a for√ßar o push!"
            echo "Isso ir√° sobrescrever o hist√≥rico remoto."
            read -p "Tem certeza? Digite 'CONFIRMAR' para continuar: " force_confirm
            
            if [ "$force_confirm" = "CONFIRMAR" ]; then
                echo "üî¥ For√ßando push..."
                git push --force origin $branch
                
                if [ $? -eq 0 ]; then
                    echo "‚úÖ Push for√ßado realizado!"
                else
                    echo "‚ùå Erro no push for√ßado!"
                    exit 1
                fi
            else
                echo "‚ùå Push for√ßado cancelado!"
                exit 0
            fi
            ;;
        3)
            echo "‚ùå Opera√ß√£o cancelada!"
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            exit 1
            ;;
    esac
fi

echo ""
echo "üéâ Processo conclu√≠do!"

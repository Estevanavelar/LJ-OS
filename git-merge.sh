#!/bin/bash

# Script para automatizar opera√ß√µes de merge com resolu√ß√£o inteligente de conflitos
# Uso: ./git-merge.sh

echo "=== GIT MERGE MANAGER ==="

# Verifica se est√° em um reposit√≥rio Git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Erro: N√£o est√° em um reposit√≥rio Git!"
    exit 1
fi

# Fun√ß√£o para mostrar status atual
show_status() {
    echo ""
    echo "üìä Status atual:"
    echo "üåø Branch atual: $(git branch --show-current)"
    echo "üì° Branch remoto: $(git branch -r | grep 'origin/HEAD' | sed 's/origin\/HEAD -> origin\///')"
    echo ""
    git status -s
}

# Fun√ß√£o para listar branches dispon√≠veis
list_branches() {
    echo ""
    echo "üåø Branches dispon√≠veis:"
    echo ""
    echo "üìã Branches locais:"
    git branch -v | sed 's/^/  /'
    echo ""
    echo "üì° Branches remotos:"
    git branch -r | sed 's/^/  /'
    echo ""
    echo "üîÑ Branches com tracking:"
    git branch -vv | sed 's/^/  /'
}

# Fun√ß√£o para verificar se h√° mudan√ßas n√£o commitadas
check_uncommitted_changes() {
    if [ ! -z "$(git status --porcelain)" ]; then
        echo ""
        echo "‚ö†Ô∏è  ATEN√á√ÉO: H√° mudan√ßas n√£o commitadas!"
        echo ""
        echo "Op√ß√µes:"
        echo "1) Fazer commit das mudan√ßas"
        echo "2) Fazer stash das mudan√ßas"
        echo "3) Descartar mudan√ßas (CUIDADO!)"
        echo "4) Cancelar opera√ß√£o"
        echo ""
        read -p "Escolha uma op√ß√£o (1-4): " change_choice
        
        case $change_choice in
            1)
                echo ""
                read -p "Mensagem do commit: " commit_msg
                if [ -z "$commit_msg" ]; then
                    commit_msg="Commit antes do merge - $(date '+%d/%m/%Y %H:%M:%S')"
                fi
                git add -A
                git commit -m "$commit_msg"
                if [ $? -eq 0 ]; then
                    echo "‚úÖ Commit realizado com sucesso!"
                else
                    echo "‚ùå Erro ao fazer commit!"
                    return 1
                fi
                ;;
            2)
                echo ""
                read -p "Mensagem do stash: " stash_msg
                if [ -z "$stash_msg" ]; then
                    stash_msg="Stash antes do merge - $(date '+%d/%m/%Y %H:%M:%S')"
                fi
                git stash push -u -m "$stash_msg"
                if [ $? -eq 0 ]; then
                    echo "‚úÖ Stash criado com sucesso!"
                else
                    echo "‚ùå Erro ao criar stash!"
                    return 1
                fi
                ;;
            3)
                echo ""
                read -p "‚ö†Ô∏è  Confirma descartar TODAS as mudan√ßas? (s/n): " confirm_discard
                if [ "$confirm_discard" = "s" ] || [ "$confirm_discard" = "S" ]; then
                    git reset --hard HEAD
                    git clean -fd
                    echo "‚úÖ Mudan√ßas descartadas!"
                else
                    echo "Opera√ß√£o cancelada."
                    return 1
                fi
                ;;
            4)
                echo "Opera√ß√£o cancelada."
                return 1
                ;;
            *)
                echo "‚ùå Op√ß√£o inv√°lida!"
                return 1
                ;;
        esac
    fi
    return 0
}

# Fun√ß√£o para merge simples
simple_merge() {
    echo ""
    echo "üîÑ Merge simples..."
    
    list_branches
    
    read -p "Nome do branch para merge: " merge_branch
    
    if [ -z "$merge_branch" ]; then
        echo "‚ùå Nome do branch n√£o pode ser vazio!"
        return
    fi
    
    # Remove 'origin/' se presente
    merge_branch=$(echo $merge_branch | sed 's/^origin\///')
    
    # Verifica se o branch existe
    if ! git show-ref --verify --quiet refs/heads/$merge_branch && ! git show-ref --verify --quiet refs/remotes/origin/$merge_branch; then
        echo "‚ùå Branch '$merge_branch' n√£o existe!"
        return
    fi
    
    echo ""
    echo "üîÑ Fazendo merge de '$merge_branch' para '$(git branch --show-current)'..."
    
    # Se for branch remoto, faz fetch primeiro
    if git show-ref --verify --quiet refs/remotes/origin/$merge_branch; then
        echo "üì° Fazendo fetch do branch remoto..."
        git fetch origin $merge_branch:$merge_branch
    fi
    
    # Tenta o merge
    git merge $merge_branch
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Merge realizado com sucesso!"
        echo ""
        echo "üìä Status ap√≥s merge:"
        git status -s
    else
        echo "‚ö†Ô∏è  Conflitos detectados! Iniciando resolu√ß√£o autom√°tica..."
        resolve_conflicts_auto
    fi
}

# Fun√ß√£o para merge com rebase
merge_with_rebase() {
    echo ""
    echo "üîÑ Merge com rebase..."
    
    list_branches
    
    read -p "Nome do branch para rebase: " rebase_branch
    
    if [ -z "$rebase_branch" ]; then
        echo "‚ùå Nome do branch n√£o pode ser vazio!"
        return
    fi
    
    # Remove 'origin/' se presente
    rebase_branch=$(echo $rebase_branch | sed 's/^origin\///')
    
    # Verifica se o branch existe
    if ! git show-ref --verify --quiet refs/heads/$rebase_branch && ! git show-ref --verify --quiet refs/remotes/origin/$rebase_branch; then
        echo "‚ùå Branch '$rebase_branch' n√£o existe!"
        return
    fi
    
    echo ""
    echo "üîÑ Fazendo rebase de '$(git branch --show-current)' sobre '$rebase_branch'..."
    
    # Se for branch remoto, faz fetch primeiro
    if git show-ref --verify --quiet refs/remotes/origin/$rebase_branch; then
        echo "üì° Fazendo fetch do branch remoto..."
        git fetch origin $rebase_branch:$rebase_branch
    fi
    
    # Tenta o rebase
    git rebase $rebase_branch
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Rebase realizado com sucesso!"
        echo ""
        echo "üìä Status ap√≥s rebase:"
        git status -s
    else
        echo "‚ö†Ô∏è  Conflitos detectados! Iniciando resolu√ß√£o autom√°tica..."
        resolve_conflicts_auto
    fi
}

# Fun√ß√£o para merge de pull request
merge_pull_request() {
    echo ""
    echo "üîÑ Merge de Pull Request..."
    
    echo "üì° Buscando informa√ß√µes do remoto..."
    git fetch --all
    
    list_branches
    
    read -p "Nome do branch da PR: " pr_branch
    
    if [ -z "$pr_branch" ]; then
        echo "‚ùå Nome do branch n√£o pode ser vazio!"
        return
    fi
    
    # Remove 'origin/' se presente
    pr_branch=$(echo $pr_branch | sed 's/^origin\///')
    
    # Verifica se o branch existe
    if ! git show-ref --verify --quiet refs/remotes/origin/$pr_branch; then
        echo "‚ùå Branch remoto '$pr_branch' n√£o existe!"
        return
    fi
    
    echo ""
    echo "üîÑ Fazendo merge da PR '$pr_branch'..."
    
    # Cria branch local da PR
    local_pr_branch="pr-$pr_branch"
    git checkout -b $local_pr_branch origin/$pr_branch
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Branch local criado: $local_pr_branch"
        
        # Volta para o branch principal
        git checkout $(git branch --show-current)
        
        # Faz o merge
        git merge $local_pr_branch
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ PR mergeada com sucesso!"
            
            # Remove o branch local da PR
            git branch -d $local_pr_branch
            echo "üóëÔ∏è  Branch local da PR removido."
        else
            echo "‚ö†Ô∏è  Conflitos detectados! Iniciando resolu√ß√£o autom√°tica..."
            resolve_conflicts_auto
        fi
    else
        echo "‚ùå Erro ao criar branch local da PR!"
    fi
}

# Fun√ß√£o para resolu√ß√£o autom√°tica de conflitos
resolve_conflicts_auto() {
    echo ""
    echo "üîß Resolu√ß√£o autom√°tica de conflitos..."
    
    # Lista arquivos com conflitos
    conflicted_files=$(git diff --name-only --diff-filter=U)
    
    if [ -z "$conflicted_files" ]; then
        echo "‚úÖ Nenhum conflito detectado!"
        return
    fi
    
    echo ""
    echo "‚ö†Ô∏è  Arquivos com conflitos:"
    echo "$conflicted_files"
    echo ""
    
    echo "üîß Estrat√©gias de resolu√ß√£o:"
    echo "1) Resolver manualmente (recomendado para conflitos complexos)"
    echo "2) Aceitar nossa vers√£o (HEAD)"
    echo "3) Aceitar vers√£o do branch mergeado"
    echo "4) Resolu√ß√£o inteligente por tipo de arquivo"
    echo "5) Cancelar merge/rebase"
    echo ""
    read -p "Escolha uma estrat√©gia (1-5): " resolve_strategy
    
    case $resolve_strategy in
        1)
            echo ""
            echo "üîß Abrindo editor para resolu√ß√£o manual..."
            echo "üí° Dicas para resolver conflitos:"
            echo "   - Procure por marcadores <<<<<<<, =======, >>>>>>>"
            echo "   - Escolha qual vers√£o manter ou combine ambas"
            echo "   - Remova os marcadores de conflito"
            echo "   - Salve o arquivo"
            echo ""
            read -p "Pressione Enter quando terminar de resolver os conflitos..."
            
            # Verifica se ainda h√° conflitos
            if [ ! -z "$(git diff --name-only --diff-filter=U)" ]; then
                echo "‚ö†Ô∏è  Ainda h√° conflitos n√£o resolvidos!"
                echo "Use 'git status' para ver arquivos com conflitos."
                return
            fi
            
            complete_merge
            ;;
        2)
            echo ""
            echo "‚úÖ Aceitando nossa vers√£o (HEAD) para todos os conflitos..."
            git checkout --ours -- .
            git add -A
            complete_merge
            ;;
        3)
            echo ""
            echo "‚úÖ Aceitando vers√£o do branch mergeado para todos os conflitos..."
            git checkout --theirs -- .
            git add -A
            complete_merge
            ;;
        4)
            echo ""
            echo "üß† Resolu√ß√£o inteligente por tipo de arquivo..."
            resolve_conflicts_smart
            ;;
        5)
            echo ""
            echo "‚ùå Cancelando merge/rebase..."
            if git status | grep -q "rebasing"; then
                git rebase --abort
                echo "‚úÖ Rebase cancelado!"
            else
                git merge --abort
                echo "‚úÖ Merge cancelado!"
            fi
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Fun√ß√£o para resolu√ß√£o inteligente por tipo de arquivo
resolve_conflicts_smart() {
    echo ""
    echo "üß† Resolu√ß√£o inteligente por tipo de arquivo..."
    
    for file in $conflicted_files; do
        echo ""
        echo "üìÅ Processando: $file"
        
        # Determina estrat√©gia baseada na extens√£o
        case "$file" in
            *.lock|*.log|*.tmp|*.temp)
                echo "   üîÑ Arquivo tempor√°rio - aceitando nossa vers√£o"
                git checkout --ours -- "$file"
                ;;
            *.json|*.xml|*.yaml|*.yml|*.config|*.conf)
                echo "   ‚öôÔ∏è  Arquivo de configura√ß√£o - aceitando nossa vers√£o"
                git checkout --ours -- "$file"
                ;;
            *.md|*.txt|*.rst)
                echo "   üìù Documenta√ß√£o - aceitando nossa vers√£o"
                git checkout --ours -- "$file"
                ;;
            *.test.js|*.test.ts|*.spec.js|*.spec.ts|*Test.java|*Test.kt)
                echo "   üß™ Arquivo de teste - aceitando nossa vers√£o"
                git checkout --ours -- "$file"
                ;;
            *.css|*.scss|*.less)
                echo "   üé® Arquivo de estilo - aceitando nossa vers√£o"
                git checkout --ours -- "$file"
                ;;
            *)
                echo "   ‚ùì Arquivo n√£o reconhecido - aceitando nossa vers√£o"
                git checkout --ours -- "$file"
                ;;
        esac
        
        git add "$file"
        echo "   ‚úÖ Conflito resolvido para $file"
    done
    
    complete_merge
}

# Fun√ß√£o para completar o merge
complete_merge() {
    echo ""
    echo "‚úÖ Todos os conflitos foram resolvidos!"
    
    # Verifica se ainda h√° conflitos
    if [ ! -z "$(git diff --name-only --diff-filter=U)" ]; then
        echo "‚ö†Ô∏è  Ainda h√° conflitos n√£o resolvidos!"
        echo "Use 'git status' para ver arquivos com conflitos."
        return
    fi
    
    # Completa o merge/rebase
    if git status | grep -q "rebasing"; then
        echo "üîÑ Completando rebase..."
        git rebase --continue
        if [ $? -eq 0 ]; then
            echo "‚úÖ Rebase completado com sucesso!"
        else
            echo "‚ùå Erro ao completar rebase!"
        fi
    else
        echo "üîÑ Completando merge..."
        git commit -m "Merge autom√°tico - $(date '+%d/%m/%Y %H:%M:%S')"
        if [ $? -eq 0 ]; then
            echo "‚úÖ Merge completado com sucesso!"
        else
            echo "‚ùå Erro ao completar merge!"
        fi
    fi
    
    echo ""
    echo "üìä Status final:"
    git status -s
}

# Fun√ß√£o para merge de m√∫ltiplos branches
merge_multiple_branches() {
    echo ""
    echo "üîÑ Merge de m√∫ltiplos branches..."
    
    list_branches
    
    echo ""
    echo "Digite os nomes dos branches para merge (separados por espa√ßo):"
    read -p "Branches: " branches_input
    
    if [ -z "$branches_input" ]; then
        echo "‚ùå Nenhum branch especificado!"
        return
    fi
    
    # Converte input em array
    IFS=' ' read -ra branches <<< "$branches_input"
    
    echo ""
    echo "üîÑ Iniciando merge de ${#branches[@]} branches..."
    
    for branch in "${branches[@]}"; do
        echo ""
        echo "üîÑ Fazendo merge de '$branch'..."
        
        # Remove 'origin/' se presente
        branch=$(echo $branch | sed 's/^origin\///')
        
        # Verifica se o branch existe
        if ! git show-ref --verify --quiet refs/heads/$branch && ! git show-ref --verify --quiet refs/remotes/origin/$branch; then
            echo "‚ö†Ô∏è  Branch '$branch' n√£o existe, pulando..."
            continue
        fi
        
        # Se for branch remoto, faz fetch primeiro
        if git show-ref --verify --quiet refs/remotes/origin/$branch; then
            git fetch origin $branch:$branch
        fi
        
        # Tenta o merge
        git merge $branch
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Merge de '$branch' realizado com sucesso!"
        else
            echo "‚ö†Ô∏è  Conflitos em '$branch'! Iniciando resolu√ß√£o..."
            resolve_conflicts_auto
            break
        fi
    done
    
    echo ""
    echo "üìä Status final:"
    git status -s
}

# Fun√ß√£o para merge com squash
merge_with_squash() {
    echo ""
    echo "üîÑ Merge com squash..."
    
    list_branches
    
    read -p "Nome do branch para squash merge: " squash_branch
    
    if [ -z "$squash_branch" ]; then
        echo "‚ùå Nome do branch n√£o pode ser vazio!"
        return
    fi
    
    # Remove 'origin/' se presente
    squash_branch=$(echo $squash_branch | sed 's/^origin\///')
    
    # Verifica se o branch existe
    if ! git show-ref --verify --quiet refs/heads/$squash_branch && ! git show-ref --verify --quiet refs/remotes/origin/$squash_branch; then
        echo "‚ùå Branch '$squash_branch' n√£o existe!"
        return
    fi
    
    echo ""
    echo "üîÑ Fazendo squash merge de '$squash_branch'..."
    
    # Se for branch remoto, faz fetch primeiro
    if git show-ref --verify --quiet refs/remotes/origin/$squash_branch; then
        git fetch origin $squash_branch:$squash_branch
    fi
    
    # Faz o squash merge
    git merge --squash $squash_branch
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Squash merge realizado com sucesso!"
        echo ""
        read -p "Mensagem do commit: " commit_msg
        if [ -z "$commit_msg" ]; then
            commit_msg="Squash merge de $squash_branch - $(date '+%d/%m/%Y %H:%M:%S')"
        fi
        git commit -m "$commit_msg"
        echo "‚úÖ Commit criado!"
    else
        echo "‚ùå Erro no squash merge!"
    fi
}

# Menu principal
while true; do
    echo ""
    echo "=== MENU MERGE ==="
    show_status
    echo ""
    echo "1) üîÑ Merge simples"
    echo "2) üîÑ Merge com rebase"
    echo "3) üîÑ Merge de Pull Request"
    echo "4) üîÑ Merge de m√∫ltiplos branches"
    echo "5) üîÑ Merge com squash"
    echo "6) üìã Listar branches"
    echo "7) üìä Mostrar status"
    echo "0) üö™ Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
    
    case $choice in
        1)
            if check_uncommitted_changes; then
                simple_merge
            fi
            ;;
        2)
            if check_uncommitted_changes; then
                merge_with_rebase
            fi
            ;;
        3)
            if check_uncommitted_changes; then
                merge_pull_request
            fi
            ;;
        4)
            if check_uncommitted_changes; then
                merge_multiple_branches
            fi
            ;;
        5)
            if check_uncommitted_changes; then
                merge_with_squash
            fi
            ;;
        6)
            list_branches
            ;;
        7)
            show_status
            ;;
        0)
            echo ""
            echo "üëã At√© logo!"
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
done

#!/bin/bash

# Script para sincroniza√ß√£o completa do Git (add, commit, pull, push)
# Uso: ./git-sync.sh ["mensagem do commit"]

echo "=== GIT SYNC - SINCRONIZA√á√ÉO COMPLETA ==="

# Verifica se est√° em um reposit√≥rio Git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Erro: N√£o est√° em um reposit√≥rio Git!"
    exit 1
fi

# Mostra informa√ß√µes do reposit√≥rio
echo "üìÅ Reposit√≥rio: $(basename `git rev-parse --show-toplevel`)"
echo "üåø Branch: $(git branch --show-current)"
echo ""

# Fun√ß√£o para verificar conex√£o com o remoto
check_remote() {
    git ls-remote origin HEAD &>/dev/null
    if [ $? -ne 0 ]; then
        echo "‚ùå Erro: N√£o foi poss√≠vel conectar ao reposit√≥rio remoto!"
        echo "Verifique sua conex√£o com a internet e suas credenciais."
        exit 1
    fi
}

# Verifica conex√£o
echo "üîó Verificando conex√£o com o remoto..."
check_remote
echo "‚úÖ Conex√£o OK!"
echo ""

# Etapa 1: Verificar mudan√ßas locais
echo "üìä Verificando mudan√ßas locais..."
if [ -n "$(git status --porcelain)" ]; then
    echo "üìù Mudan√ßas encontradas:"
    git status -s
    echo ""
    
    # Adiciona todas as mudan√ßas
    echo "‚ûï Adicionando mudan√ßas..."
    git add -A
    
    # Define mensagem do commit
    if [ -z "$1" ]; then
        echo ""
        echo "Digite a mensagem do commit (Enter para mensagem padr√£o):"
        read -r commit_message
        
        if [ -z "$commit_message" ]; then
            commit_message="Sincroniza√ß√£o autom√°tica - $(date '+%d/%m/%Y %H:%M:%S')"
        fi
    else
        commit_message="$1"
    fi
    
    # Faz o commit
    echo "üíæ Fazendo commit: $commit_message"
    git commit -m "$commit_message"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Commit realizado!"
        commit_made=true
    else
        echo "‚ùå Erro ao fazer commit!"
        exit 1
    fi
else
    echo "‚úÖ Nenhuma mudan√ßa local para commit."
    commit_made=false
fi

echo ""

# Etapa 2: Buscar atualiza√ß√µes
echo "üîÑ Buscando atualiza√ß√µes do remoto..."
git fetch origin

# Verifica status de sincroniza√ß√£o
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u} 2>/dev/null)
BASE=$(git merge-base @ @{u} 2>/dev/null)

if [ -z "$REMOTE" ]; then
    echo "‚ö†Ô∏è  Branch n√£o tem upstream configurado!"
    
    if [ "$commit_made" = true ]; then
        echo ""
        read -p "Deseja criar o branch no remoto e fazer push? (s/n): " create_upstream
        
        if [ "$create_upstream" = "s" ] || [ "$create_upstream" = "S" ]; then
            echo "üì§ Criando branch remoto e fazendo push..."
            git push -u origin $(git branch --show-current)
            
            if [ $? -eq 0 ]; then
                echo "‚úÖ Branch criado e sincronizado!"
            else
                echo "‚ùå Erro ao criar branch remoto!"
                exit 1
            fi
        fi
    fi
    echo ""
    echo "üéâ Processo conclu√≠do!"
    exit 0
fi

# Etapa 3: Sincronizar com o remoto
if [ "$LOCAL" = "$REMOTE" ]; then
    echo "‚úÖ Reposit√≥rio j√° est√° sincronizado!"
elif [ "$LOCAL" = "$BASE" ]; then
    # Remoto tem commits que n√£o temos
    echo "üì• Baixando atualiza√ß√µes do remoto..."
    git pull origin $(git branch --show-current)
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Atualiza√ß√µes baixadas com sucesso!"
    else
        echo "‚ùå Erro ao fazer pull! Pode haver conflitos para resolver."
        exit 1
    fi
elif [ "$REMOTE" = "$BASE" ]; then
    # Temos commits locais para enviar
    echo "üì§ Enviando commits locais..."
    git push origin $(git branch --show-current)
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Commits enviados com sucesso!"
    else
        echo "‚ùå Erro ao fazer push!"
        exit 1
    fi
else
    # Diverg√™ncia - precisamos fazer merge
    echo "üîÄ Diverg√™ncia detectada! Sincronizando..."
    echo ""
    echo "üì• Primeiro, baixando atualiza√ß√µes..."
    git pull origin $(git branch --show-current)
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Merge realizado com sucesso!"
        echo ""
        echo "üì§ Agora enviando tudo..."
        git push origin $(git branch --show-current)
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Sincroniza√ß√£o completa!"
        else
            echo "‚ùå Erro ao fazer push ap√≥s merge!"
            exit 1
        fi
    else
        echo "‚ùå Conflitos detectados durante o merge!"
        echo ""
        echo "üìã Arquivos com conflito:"
        git diff --name-only --diff-filter=U
        echo ""
        echo "Resolva os conflitos manualmente, fa√ßa commit e execute o script novamente."
        exit 1
    fi
fi

echo ""

# Resumo final
echo "üìä === RESUMO FINAL ==="
echo "üåø Branch: $(git branch --show-current)"
echo "üìç √öltimo commit local:"
git log -1 --oneline
echo ""

# Verifica se est√° totalmente sincronizado
LOCAL_FINAL=$(git rev-parse @)
REMOTE_FINAL=$(git rev-parse @{u} 2>/dev/null)

if [ "$LOCAL_FINAL" = "$REMOTE_FINAL" ]; then
    echo "‚úÖ Status: Totalmente sincronizado!"
else
    echo "‚ö†Ô∏è  Status: Pode haver dessincroniza√ß√£o"
fi

echo ""
echo "üéâ Processo de sincroniza√ß√£o conclu√≠do!"

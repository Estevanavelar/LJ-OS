#!/bin/bash

# Script para automatizar visualiza√ß√£o de logs e hist√≥rico do Git
# Uso: ./git-log.sh

echo "=== GIT LOG VIEWER ==="

# Verifica se est√° em um reposit√≥rio Git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Erro: N√£o est√° em um reposit√≥rio Git!"
    exit 1
fi

# Fun√ß√£o para mostrar logs b√°sicos
show_basic_logs() {
    echo ""
    echo "üìã Logs b√°sicos:"
    echo "1) √öltimos 10 commits"
    echo "2) √öltimos 20 commits"
    echo "3) √öltimos 50 commits"
    echo "4) Todos os commits"
    echo ""
    read -p "Escolha uma op√ß√£o (1-4): " log_choice
    
    case $log_choice in
        1)
            git log --oneline -10
            ;;
        2)
            git log --oneline -20
            ;;
        3)
            git log --oneline -50
            ;;
        4)
            git log --oneline
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Fun√ß√£o para logs com filtros de tempo
show_time_filtered_logs() {
    echo ""
    echo "‚è∞ Logs filtrados por tempo:"
    echo "1) Commits de hoje"
    echo "2) Commits da √∫ltima semana"
    echo "3) Commits do √∫ltimo m√™s"
    echo "4) Commits do √∫ltimo ano"
    echo "5) Commits desde data espec√≠fica"
    echo "6) Commits entre duas datas"
    echo ""
    read -p "Escolha uma op√ß√£o (1-6): " time_choice
    
    case $time_choice in
        1)
            git log --oneline --since="midnight"
            ;;
        2)
            git log --oneline --since="1 week ago"
            ;;
        3)
            git log --oneline --since="1 month ago"
            ;;
        4)
            git log --oneline --since="1 year ago"
            ;;
        5)
            read -p "Data (formato: YYYY-MM-DD): " start_date
            if [ ! -z "$start_date" ]; then
                git log --oneline --since="$start_date"
            fi
            ;;
        6)
            read -p "Data inicial (YYYY-MM-DD): " start_date
            read -p "Data final (YYYY-MM-DD): " end_date
            if [ ! -z "$start_date" ] && [ ! -z "$end_date" ]; then
                git log --oneline --since="$start_date" --until="$end_date"
            fi
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Fun√ß√£o para logs com filtros de autor
show_author_filtered_logs() {
    echo ""
    echo "üë§ Logs filtrados por autor:"
    echo "1) Buscar por nome de autor"
    echo "2) Buscar por email de autor"
    echo "3) Listar todos os autores"
    echo "4) Commits de autor espec√≠fico"
    echo ""
    read -p "Escolha uma op√ß√£o (1-4): " author_choice
    
    case $author_choice in
        1)
            read -p "Nome do autor: " author_name
            if [ ! -z "$author_name" ]; then
                echo ""
                echo "üîç Buscando commits de '$author_name':"
                git log --oneline --author="$author_name"
            fi
            ;;
        2)
            read -p "Email do autor: " author_email
            if [ ! -z "$author_email" ]; then
                echo ""
                echo "üîç Buscando commits de '$author_email':"
                git log --oneline --author="$author_email"
            fi
            ;;
        3)
            echo ""
            echo "üë• Autores do reposit√≥rio:"
            git log --format='%aN <%aE>' | sort -u
            ;;
        4)
            echo ""
            echo "üë• Autores dispon√≠veis:"
            git log --format='%aN' | sort -u | head -10
            echo "..."
            echo ""
            read -p "Nome do autor: " author_name
            if [ ! -z "$author_name" ]; then
                echo ""
                echo "üìä Estat√≠sticas de '$author_name':"
                git log --author="$author_name" --pretty=format:"%h - %an, %ar : %s" --stat
            fi
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Fun√ß√£o para logs com filtros de mensagem
show_message_filtered_logs() {
    echo ""
    echo "üí¨ Logs filtrados por mensagem:"
    echo "1) Buscar por texto na mensagem"
    echo "2) Buscar por regex na mensagem"
    echo "3) Buscar por tipo de commit (feat, fix, etc.)"
    echo ""
    read -p "Escolha uma op√ß√£o (1-3): " message_choice
    
    case $message_choice in
        1)
            read -p "Texto a buscar: " search_text
            if [ ! -z "$search_text" ]; then
                echo ""
                echo "üîç Buscando commits com '$search_text':"
                git log --oneline --grep="$search_text"
            fi
            ;;
        2)
            read -p "Regex a buscar: " search_regex
            if [ ! -z "$search_regex" ]; then
                echo ""
                echo "üîç Buscando commits com regex '$search_regex':"
                git log --oneline --grep="$search_regex"
            fi
            ;;
        3)
            echo ""
            echo "üìù Tipos de commit comuns:"
            echo "feat: nova funcionalidade"
            echo "fix: corre√ß√£o de bug"
            echo "docs: documenta√ß√£o"
            echo "style: formata√ß√£o"
            echo "refactor: refatora√ß√£o"
            echo "test: testes"
            echo "chore: tarefas de manuten√ß√£o"
            echo ""
            read -p "Tipo de commit: " commit_type
            if [ ! -z "$commit_type" ]; then
                echo ""
                echo "üîç Buscando commits do tipo '$commit_type':"
                git log --oneline --grep="^$commit_type:"
            fi
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Fun√ß√£o para logs com filtros de arquivo
show_file_filtered_logs() {
    echo ""
    echo "üìÅ Logs filtrados por arquivo:"
    echo "1) Hist√≥rico de arquivo espec√≠fico"
    echo "2) Commits que modificaram arquivo"
    echo "3) Buscar por extens√£o de arquivo"
    echo ""
    read -p "Escolha uma op√ß√£o (1-3): " file_choice
    
    case $file_choice in
        1)
            read -p "Nome do arquivo: " file_name
            if [ ! -z "$file_name" ]; then
                echo ""
                echo "üìã Hist√≥rico do arquivo '$file_name':"
                git log --oneline --follow -- "$file_name"
            fi
            ;;
        2)
            read -p "Nome do arquivo: " file_name
            if [ ! -z "$file_name" ]; then
                echo ""
                echo "üìä Commits que modificaram '$file_name':"
                git log --oneline --stat -- "$file_name"
            fi
            ;;
        3)
            read -p "Extens√£o (ex: .js, .py, .md): " file_ext
            if [ ! -z "$file_ext" ]; then
                echo ""
                echo "üîç Buscando commits em arquivos '$file_ext':"
                git log --oneline --name-only --grep=".*" | grep "$file_ext" | sort -u
            fi
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Fun√ß√£o para logs com gr√°fico
show_graph_logs() {
    echo ""
    echo "üìä Logs com gr√°fico:"
    echo "1) Gr√°fico simples"
    echo "2) Gr√°fico com todos os branches"
    echo "3) Gr√°fico com tags"
    echo "4) Gr√°fico com estat√≠sticas"
    echo ""
    read -p "Escolha uma op√ß√£o (1-4): " graph_choice
    
    case $graph_choice in
        1)
            git log --graph --oneline --all -20
            ;;
        2)
            git log --graph --oneline --all --decorate -30
            ;;
        3)
            git log --graph --oneline --all --decorate --tags -30
            ;;
        4)
            git log --graph --oneline --all --decorate --stat -10
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Fun√ß√£o para logs detalhados
show_detailed_logs() {
    echo ""
    echo "üîç Logs detalhados:"
    echo "1) Commit espec√≠fico por hash"
    echo "2) Diff de commit espec√≠fico"
    echo "3) Estat√≠sticas de commits"
    echo "4) Log com patches"
    echo ""
    read -p "Escolha uma op√ß√£o (1-4): " detail_choice
    
    case $detail_choice in
        1)
            echo ""
            echo "Commits recentes:"
            git log --oneline -10
            echo ""
            read -p "Hash do commit: " commit_hash
            if [ ! -z "$commit_hash" ]; then
                echo ""
                echo "üìã Detalhes do commit $commit_hash:"
                git show --stat $commit_hash
            fi
            ;;
        2)
            echo ""
            echo "Commits recentes:"
            git log --oneline -10
            echo ""
            read -p "Hash do commit: " commit_hash
            if [ ! -z "$commit_hash" ]; then
                echo ""
                echo "üìã Diff do commit $commit_hash:"
                git show $commit_hash
            fi
            ;;
        3)
            echo ""
            echo "üìä Estat√≠sticas de commits:"
            git log --pretty=format:"%h - %an, %ar : %s" --stat
            ;;
        4)
            echo ""
            echo "üìã Log com patches:"
            git log -p -5
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Fun√ß√£o para exportar logs
export_logs() {
    echo ""
    echo "üì§ Exportar logs:"
    echo "1) Exportar para arquivo de texto"
    echo "2) Exportar para CSV"
    echo "3) Exportar para JSON (formato simples)"
    echo ""
    read -p "Escolha uma op√ß√£o (1-3): " export_choice
    
    case $export_choice in
        1)
            read -p "Nome do arquivo: " file_name
            if [ -z "$file_name" ]; then
                file_name="git-log-$(date '+%Y%m%d-%H%M%S').txt"
            fi
            git log --pretty=format:"%h - %an, %ar : %s" > "$file_name"
            echo "‚úÖ Logs exportados para '$file_name'"
            ;;
        2)
            read -p "Nome do arquivo: " file_name
            if [ -z "$file_name" ]; then
                file_name="git-log-$(date '+%Y%m%d-%H%M%S').csv"
            fi
            echo "Hash,Author,Date,Message" > "$file_name"
            git log --pretty=format:"%h,%an,%ar,%s" >> "$file_name"
            echo "‚úÖ Logs exportados para '$file_name'"
            ;;
        3)
            read -p "Nome do arquivo: " file_name
            if [ -z "$file_name" ]; then
                file_name="git-log-$(date '+%Y%m%d-%H%M%S').json"
            fi
            echo "[" > "$file_name"
            git log --pretty=format:'{"hash":"%h","author":"%an","date":"%ar","message":"%s"}' --no-merges | sed 's/}/},/g' | sed '$s/,$//' >> "$file_name"
            echo "]" >> "$file_name"
            echo "‚úÖ Logs exportados para '$file_name'"
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
}

# Menu principal
while true; do
    echo ""
    echo "=== MENU LOG VIEWER ==="
    echo "üåø Branch atual: $(git branch --show-current)"
    echo ""
    echo "1) üìã Logs b√°sicos"
    echo "2) ‚è∞ Filtros por tempo"
    echo "3) üë§ Filtros por autor"
    echo "4) üí¨ Filtros por mensagem"
    echo "5) üìÅ Filtros por arquivo"
    echo "6) üìä Logs com gr√°fico"
    echo "7) üîç Logs detalhados"
    echo "8) üì§ Exportar logs"
    echo "0) üö™ Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
    
    case $choice in
        1)
            show_basic_logs
            ;;
        2)
            show_time_filtered_logs
            ;;
        3)
            show_author_filtered_logs
            ;;
        4)
            show_message_filtered_logs
            ;;
        5)
            show_file_filtered_logs
            ;;
        6)
            show_graph_logs
            ;;
        7)
            show_detailed_logs
            ;;
        8)
            export_logs
            ;;
        0)
            echo ""
            echo "üëã At√© logo!"
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida!"
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
done
